# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .proxy_location import ProxyLocation
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class LoginRequestBody_Skyvern(UniversalBaseModel):
    credential_type: typing.Literal["skyvern"] = "skyvern"
    url: typing.Optional[str] = None
    prompt: typing.Optional[str] = None
    webhook_url: typing.Optional[str] = None
    proxy_location: typing.Optional[ProxyLocation] = None
    totp_identifier: typing.Optional[str] = None
    totp_url: typing.Optional[str] = None
    browser_session_id: typing.Optional[str] = None
    extra_http_headers: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None
    max_screenshot_scrolling_times: typing.Optional[int] = None
    credential_id: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class LoginRequestBody_Bitwarden(UniversalBaseModel):
    credential_type: typing.Literal["bitwarden"] = "bitwarden"
    url: typing.Optional[str] = None
    prompt: typing.Optional[str] = None
    webhook_url: typing.Optional[str] = None
    proxy_location: typing.Optional[ProxyLocation] = None
    totp_identifier: typing.Optional[str] = None
    totp_url: typing.Optional[str] = None
    browser_session_id: typing.Optional[str] = None
    extra_http_headers: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None
    max_screenshot_scrolling_times: typing.Optional[int] = None
    bitwarden_collection_id: typing.Optional[str] = None
    bitwarden_item_id: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class LoginRequestBody_1Password(UniversalBaseModel):
    credential_type: typing.Literal["1password"] = "1password"
    url: typing.Optional[str] = None
    prompt: typing.Optional[str] = None
    webhook_url: typing.Optional[str] = None
    proxy_location: typing.Optional[ProxyLocation] = None
    totp_identifier: typing.Optional[str] = None
    totp_url: typing.Optional[str] = None
    browser_session_id: typing.Optional[str] = None
    extra_http_headers: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None
    max_screenshot_scrolling_times: typing.Optional[int] = None
    onepassword_vault_id: str
    onepassword_item_id: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


LoginRequestBody = typing.Union[LoginRequestBody_Skyvern, LoginRequestBody_Bitwarden, LoginRequestBody_1Password]
