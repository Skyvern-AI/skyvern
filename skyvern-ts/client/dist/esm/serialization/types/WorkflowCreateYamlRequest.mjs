// This file was auto-generated by Fern from our API Definition.
import * as core from "../../core/index.mjs";
import { ProxyLocation } from "./ProxyLocation.mjs";
import { WorkflowDefinitionYaml } from "./WorkflowDefinitionYaml.mjs";
import { WorkflowStatus } from "./WorkflowStatus.mjs";
export const WorkflowCreateYamlRequest = core.serialization.object({
    title: core.serialization.string(),
    description: core.serialization.string().optional(),
    proxyLocation: core.serialization.property("proxy_location", ProxyLocation.optional()),
    webhookCallbackUrl: core.serialization.property("webhook_callback_url", core.serialization.string().optional()),
    totpVerificationUrl: core.serialization.property("totp_verification_url", core.serialization.string().optional()),
    totpIdentifier: core.serialization.property("totp_identifier", core.serialization.string().optional()),
    persistBrowserSession: core.serialization.property("persist_browser_session", core.serialization.boolean().optional()),
    model: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    workflowDefinition: core.serialization.property("workflow_definition", WorkflowDefinitionYaml),
    isSavedTask: core.serialization.property("is_saved_task", core.serialization.boolean().optional()),
    maxScreenshotScrolls: core.serialization.property("max_screenshot_scrolls", core.serialization.number().optional()),
    extraHttpHeaders: core.serialization.property("extra_http_headers", core.serialization.record(core.serialization.string(), core.serialization.string().optional()).optional()),
    status: WorkflowStatus.optional(),
    runWith: core.serialization.property("run_with", core.serialization.string().optional()),
    aiFallback: core.serialization.property("ai_fallback", core.serialization.boolean().optional()),
    cacheKey: core.serialization.property("cache_key", core.serialization.string().optional()),
    runSequentially: core.serialization.property("run_sequentially", core.serialization.boolean().optional()),
    sequentialKey: core.serialization.property("sequential_key", core.serialization.string().optional()),
});
