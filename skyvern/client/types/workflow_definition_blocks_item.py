# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
from .context_parameter import ContextParameter
import typing
from .output_parameter import OutputParameter
from .run_engine import RunEngine
from .action_block_data_schema import ActionBlockDataSchema
from .action_block_parameters_item import ActionBlockParametersItem
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .code_block_parameters_item import CodeBlockParametersItem
from .extraction_block_data_schema import ExtractionBlockDataSchema
from .extraction_block_parameters_item import ExtractionBlockParametersItem
from .file_download_block_data_schema import FileDownloadBlockDataSchema
from .file_download_block_parameters_item import FileDownloadBlockParametersItem
from .file_storage_type import FileStorageType
import typing_extensions
from ..core.serialization import FieldMetadata
from .file_type import FileType
from .for_loop_block_loop_over import ForLoopBlockLoopOver
from .url_block_data_schema import UrlBlockDataSchema
from .url_block_parameters_item import UrlBlockParametersItem
from .login_block_data_schema import LoginBlockDataSchema
from .login_block_parameters_item import LoginBlockParametersItem
from .navigation_block_data_schema import NavigationBlockDataSchema
from .navigation_block_parameters_item import NavigationBlockParametersItem
from .aws_secret_parameter import AwsSecretParameter
from .task_block_data_schema import TaskBlockDataSchema
from .task_block_parameters_item import TaskBlockParametersItem
from .text_prompt_block_parameters_item import TextPromptBlockParametersItem
from .validation_block_data_schema import ValidationBlockDataSchema
from .validation_block_parameters_item import ValidationBlockParametersItem
from .wait_block_parameters_item import WaitBlockParametersItem
from ..core.pydantic_utilities import update_forward_refs


class WorkflowDefinitionBlocksItem_Action(UniversalBaseModel):
    block_type: typing.Literal["action"] = "action"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    task_type: str | None = None
    url: str | None = None
    title: str | None = None
    engine: RunEngine | None = None
    complete_criterion: str | None = None
    terminate_criterion: str | None = None
    navigation_goal: str | None = None
    data_extraction_goal: str | None = None
    data_schema: ActionBlockDataSchema | None = None
    error_code_mapping: dict[str, str | None] | None = None
    max_retries: int | None = None
    max_steps_per_run: int | None = None
    parameters: list[ActionBlockParametersItem] | None = None
    complete_on_download: bool | None = None
    download_suffix: str | None = None
    totp_verification_url: str | None = None
    totp_identifier: str | None = None
    cache_actions: bool | None = None
    complete_verification: bool | None = None
    include_action_history_in_verification: bool | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_Code(UniversalBaseModel):
    block_type: typing.Literal["code"] = "code"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    code: str
    parameters: list[CodeBlockParametersItem] | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_DownloadToS3(UniversalBaseModel):
    block_type: typing.Literal["download_to_s3"] = "download_to_s3"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    url: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_Extraction(UniversalBaseModel):
    block_type: typing.Literal["extraction"] = "extraction"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    task_type: str | None = None
    url: str | None = None
    title: str | None = None
    engine: RunEngine | None = None
    complete_criterion: str | None = None
    terminate_criterion: str | None = None
    navigation_goal: str | None = None
    data_extraction_goal: str
    data_schema: ExtractionBlockDataSchema | None = None
    error_code_mapping: dict[str, str | None] | None = None
    max_retries: int | None = None
    max_steps_per_run: int | None = None
    parameters: list[ExtractionBlockParametersItem] | None = None
    complete_on_download: bool | None = None
    download_suffix: str | None = None
    totp_verification_url: str | None = None
    totp_identifier: str | None = None
    cache_actions: bool | None = None
    complete_verification: bool | None = None
    include_action_history_in_verification: bool | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_FileDownload(UniversalBaseModel):
    block_type: typing.Literal["file_download"] = "file_download"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    task_type: str | None = None
    url: str | None = None
    title: str | None = None
    engine: RunEngine | None = None
    complete_criterion: str | None = None
    terminate_criterion: str | None = None
    navigation_goal: str | None = None
    data_extraction_goal: str | None = None
    data_schema: FileDownloadBlockDataSchema | None = None
    error_code_mapping: dict[str, str | None] | None = None
    max_retries: int | None = None
    max_steps_per_run: int | None = None
    parameters: list[FileDownloadBlockParametersItem] | None = None
    complete_on_download: bool | None = None
    download_suffix: str | None = None
    totp_verification_url: str | None = None
    totp_identifier: str | None = None
    cache_actions: bool | None = None
    complete_verification: bool | None = None
    include_action_history_in_verification: bool | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_FileUpload(UniversalBaseModel):
    block_type: typing.Literal["file_upload"] = "file_upload"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    storage_type: FileStorageType | None = None
    s3bucket: typing_extensions.Annotated[str | None, FieldMetadata(alias="s3_bucket")] = None
    aws_access_key_id: str | None = None
    aws_secret_access_key: str | None = None
    region_name: str | None = None
    path: str | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_FileUrlParser(UniversalBaseModel):
    block_type: typing.Literal["file_url_parser"] = "file_url_parser"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    file_url: str
    file_type: FileType = "csv"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_ForLoop(UniversalBaseModel):
    block_type: typing.Literal["for_loop"] = "for_loop"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    loop_blocks: list[ForLoopBlockLoopBlocksItem]
    loop_over: ForLoopBlockLoopOver | None = None
    loop_variable_reference: str | None = None
    complete_if_empty: bool | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .for_loop_block import ForLoopBlock  # noqa: E402
from .for_loop_block_loop_blocks_item import ForLoopBlockLoopBlocksItem  # noqa: E402


class WorkflowDefinitionBlocksItem_GotoUrl(UniversalBaseModel):
    block_type: typing.Literal["goto_url"] = "goto_url"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    task_type: str | None = None
    url: str
    title: str | None = None
    engine: RunEngine | None = None
    complete_criterion: str | None = None
    terminate_criterion: str | None = None
    navigation_goal: str | None = None
    data_extraction_goal: str | None = None
    data_schema: UrlBlockDataSchema | None = None
    error_code_mapping: dict[str, str | None] | None = None
    max_retries: int | None = None
    max_steps_per_run: int | None = None
    parameters: list[UrlBlockParametersItem] | None = None
    complete_on_download: bool | None = None
    download_suffix: str | None = None
    totp_verification_url: str | None = None
    totp_identifier: str | None = None
    cache_actions: bool | None = None
    complete_verification: bool | None = None
    include_action_history_in_verification: bool | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_Login(UniversalBaseModel):
    block_type: typing.Literal["login"] = "login"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    task_type: str | None = None
    url: str | None = None
    title: str | None = None
    engine: RunEngine | None = None
    complete_criterion: str | None = None
    terminate_criterion: str | None = None
    navigation_goal: str | None = None
    data_extraction_goal: str | None = None
    data_schema: LoginBlockDataSchema | None = None
    error_code_mapping: dict[str, str | None] | None = None
    max_retries: int | None = None
    max_steps_per_run: int | None = None
    parameters: list[LoginBlockParametersItem] | None = None
    complete_on_download: bool | None = None
    download_suffix: str | None = None
    totp_verification_url: str | None = None
    totp_identifier: str | None = None
    cache_actions: bool | None = None
    complete_verification: bool | None = None
    include_action_history_in_verification: bool | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_Navigation(UniversalBaseModel):
    block_type: typing.Literal["navigation"] = "navigation"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    task_type: str | None = None
    url: str | None = None
    title: str | None = None
    engine: RunEngine | None = None
    complete_criterion: str | None = None
    terminate_criterion: str | None = None
    navigation_goal: str
    data_extraction_goal: str | None = None
    data_schema: NavigationBlockDataSchema | None = None
    error_code_mapping: dict[str, str | None] | None = None
    max_retries: int | None = None
    max_steps_per_run: int | None = None
    parameters: list[NavigationBlockParametersItem] | None = None
    complete_on_download: bool | None = None
    download_suffix: str | None = None
    totp_verification_url: str | None = None
    totp_identifier: str | None = None
    cache_actions: bool | None = None
    complete_verification: bool | None = None
    include_action_history_in_verification: bool | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_PdfParser(UniversalBaseModel):
    block_type: typing.Literal["pdf_parser"] = "pdf_parser"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    file_url: str
    json_schema: dict[str, typing.Any | None] | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_SendEmail(UniversalBaseModel):
    block_type: typing.Literal["send_email"] = "send_email"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    smtp_host: AwsSecretParameter
    smtp_port: AwsSecretParameter
    smtp_username: AwsSecretParameter
    smtp_password: AwsSecretParameter
    sender: str
    recipients: list[str]
    subject: str
    body: str
    file_attachments: list[str] | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_Task(UniversalBaseModel):
    block_type: typing.Literal["task"] = "task"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    task_type: str | None = None
    url: str | None = None
    title: str | None = None
    engine: RunEngine | None = None
    complete_criterion: str | None = None
    terminate_criterion: str | None = None
    navigation_goal: str | None = None
    data_extraction_goal: str | None = None
    data_schema: TaskBlockDataSchema | None = None
    error_code_mapping: dict[str, str | None] | None = None
    max_retries: int | None = None
    max_steps_per_run: int | None = None
    parameters: list[TaskBlockParametersItem] | None = None
    complete_on_download: bool | None = None
    download_suffix: str | None = None
    totp_verification_url: str | None = None
    totp_identifier: str | None = None
    cache_actions: bool | None = None
    complete_verification: bool | None = None
    include_action_history_in_verification: bool | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_TaskV2(UniversalBaseModel):
    block_type: typing.Literal["task_v2"] = "task_v2"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    prompt: str
    url: str | None = None
    totp_verification_url: str | None = None
    totp_identifier: str | None = None
    max_iterations: int | None = None
    max_steps: int | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_TextPrompt(UniversalBaseModel):
    block_type: typing.Literal["text_prompt"] = "text_prompt"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    llm_key: str | None = None
    prompt: str
    parameters: list[TextPromptBlockParametersItem] | None = None
    json_schema: dict[str, typing.Any | None] | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_UploadToS3(UniversalBaseModel):
    block_type: typing.Literal["upload_to_s3"] = "upload_to_s3"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    path: str | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_Validation(UniversalBaseModel):
    block_type: typing.Literal["validation"] = "validation"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    task_type: str | None = None
    url: str | None = None
    title: str | None = None
    engine: RunEngine | None = None
    complete_criterion: str | None = None
    terminate_criterion: str | None = None
    navigation_goal: str | None = None
    data_extraction_goal: str | None = None
    data_schema: ValidationBlockDataSchema | None = None
    error_code_mapping: dict[str, str | None] | None = None
    max_retries: int | None = None
    max_steps_per_run: int | None = None
    parameters: list[ValidationBlockParametersItem] | None = None
    complete_on_download: bool | None = None
    download_suffix: str | None = None
    totp_verification_url: str | None = None
    totp_identifier: str | None = None
    cache_actions: bool | None = None
    complete_verification: bool | None = None
    include_action_history_in_verification: bool | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowDefinitionBlocksItem_Wait(UniversalBaseModel):
    block_type: typing.Literal["wait"] = "wait"
    label: str
    output_parameter: OutputParameter
    continue_on_failure: bool | None = None
    wait_sec: int
    parameters: list[WaitBlockParametersItem] | None = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


WorkflowDefinitionBlocksItem = typing.Union[
    WorkflowDefinitionBlocksItem_Action,
    WorkflowDefinitionBlocksItem_Code,
    WorkflowDefinitionBlocksItem_DownloadToS3,
    WorkflowDefinitionBlocksItem_Extraction,
    WorkflowDefinitionBlocksItem_FileDownload,
    WorkflowDefinitionBlocksItem_FileUpload,
    WorkflowDefinitionBlocksItem_FileUrlParser,
    WorkflowDefinitionBlocksItem_ForLoop,
    WorkflowDefinitionBlocksItem_GotoUrl,
    WorkflowDefinitionBlocksItem_Login,
    WorkflowDefinitionBlocksItem_Navigation,
    WorkflowDefinitionBlocksItem_PdfParser,
    WorkflowDefinitionBlocksItem_SendEmail,
    WorkflowDefinitionBlocksItem_Task,
    WorkflowDefinitionBlocksItem_TaskV2,
    WorkflowDefinitionBlocksItem_TextPrompt,
    WorkflowDefinitionBlocksItem_UploadToS3,
    WorkflowDefinitionBlocksItem_Validation,
    WorkflowDefinitionBlocksItem_Wait,
]
update_forward_refs(WorkflowDefinitionBlocksItem_ForLoop)
