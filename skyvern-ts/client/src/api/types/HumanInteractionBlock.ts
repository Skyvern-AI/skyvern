// This file was auto-generated by Fern from our API Definition.

import type * as Skyvern from "../index.js";

/**
 * A block for human/agent interaction.
 *
 * For the first pass at this, the implicit behaviour is that the user is given a single binary
 * choice (a go//no-go).
 *
 * If the human:
 *   - chooses positively, the workflow continues
 *   - chooses negatively, the workflow is terminated
 *   - does not respond within the timeout period, the workflow terminates
 */
export interface HumanInteractionBlock {
    label: string;
    output_parameter: Skyvern.OutputParameter;
    continue_on_failure?: boolean;
    model?: Record<string, unknown>;
    disable_cache?: boolean;
    task_type?: string;
    url?: string;
    title?: string;
    engine?: Skyvern.RunEngine;
    complete_criterion?: string;
    terminate_criterion?: string;
    navigation_goal?: string;
    data_extraction_goal?: string;
    data_schema?: HumanInteractionBlock.DataSchema;
    error_code_mapping?: Record<string, string | undefined>;
    max_retries?: number;
    max_steps_per_run?: number;
    parameters?: Skyvern.HumanInteractionBlockParametersItem[];
    complete_on_download?: boolean;
    download_suffix?: string;
    totp_verification_url?: string;
    totp_identifier?: string;
    cache_actions?: boolean;
    complete_verification?: boolean;
    include_action_history_in_verification?: boolean;
    download_timeout?: number;
    instructions?: string;
    positive_descriptor?: string;
    negative_descriptor?: string;
    timeout_seconds?: number;
    sender?: string;
    recipients?: string[];
    subject?: string;
    body?: string;
}

export namespace HumanInteractionBlock {
    export type DataSchema = Record<string, unknown> | unknown[] | string;
}
