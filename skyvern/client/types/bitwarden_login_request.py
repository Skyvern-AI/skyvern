# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .proxy_location import ProxyLocation
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class BitwardenLoginRequest(UniversalBaseModel):
    """
    Login with password saved in Bitwarden
    """

    url: typing.Optional[str] = pydantic.Field(default=None)
    """
    Website url
    """

    prompt: typing.Optional[str] = pydantic.Field(default=None)
    """
    Login instructions. Skyvern has default prompt/instruction for login if this field is not provided.
    """

    webhook_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    Webhook URL to send login status updates
    """

    proxy_location: typing.Optional[ProxyLocation] = pydantic.Field(default=None)
    """
    Proxy location to use
    """

    totp_identifier: typing.Optional[str] = pydantic.Field(default=None)
    """
    Identifier for TOTP (Time-based One-Time Password) if required
    """

    totp_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    TOTP URL to fetch one-time passwords
    """

    browser_session_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of the browser session to use, which is prefixed by `pbs_` e.g. `pbs_123456`
    """

    extra_http_headers: typing.Optional[typing.Dict[str, typing.Optional[str]]] = pydantic.Field(default=None)
    """
    Additional HTTP headers to include in requests
    """

    max_screenshot_scrolling_times: typing.Optional[int] = pydantic.Field(default=None)
    """
    Maximum number of times to scroll for screenshots
    """

    bitwarden_collection_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Bitwarden collection ID
    """

    bitwarden_item_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Bitwarden item ID
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
