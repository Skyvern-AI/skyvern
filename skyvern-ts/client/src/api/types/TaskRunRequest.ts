// This file was auto-generated by Fern from our API Definition.

import type * as Skyvern from "../index.js";

export interface TaskRunRequest {
    /**
     * The goal or task description for Skyvern to accomplish
     */
    prompt: string;
    /**
     * The starting URL for the task. If not provided, Skyvern will attempt to determine an appropriate URL
     */
    url?: string;
    /**
     * The engine that powers the agent task. The default value is `skyvern-2.0`, the latest Skyvern agent that performs pretty well with complex and multi-step tasks. `skyvern-1.0` is good for simple tasks like filling a form, or searching for information on Google. The `openai-cua` engine uses OpenAI's CUA model. The `anthropic-cua` uses Anthropic's Claude Sonnet 3.7 model with the computer use tool.
     */
    engine?: Skyvern.RunEngine;
    /** The title for the task */
    title?: string;
    /**
     * Geographic Proxy location to route the browser traffic through. This is only available in Skyvern Cloud.
     *
     * Available geotargeting options:
     * - RESIDENTIAL: the default value. Skyvern Cloud uses a random US residential proxy.
     * - RESIDENTIAL_ES: Spain
     * - RESIDENTIAL_IE: Ireland
     * - RESIDENTIAL_GB: United Kingdom
     * - RESIDENTIAL_IN: India
     * - RESIDENTIAL_JP: Japan
     * - RESIDENTIAL_FR: France
     * - RESIDENTIAL_DE: Germany
     * - RESIDENTIAL_NZ: New Zealand
     * - RESIDENTIAL_ZA: South Africa
     * - RESIDENTIAL_AR: Argentina
     * - RESIDENTIAL_AU: Australia
     * - RESIDENTIAL_ISP: ISP proxy
     * - US-CA: California
     * - US-NY: New York
     * - US-TX: Texas
     * - US-FL: Florida
     * - US-WA: Washington
     * - NONE: No proxy
     */
    proxy_location?: Skyvern.ProxyLocation;
    /**
     * The schema for data to be extracted from the webpage. If you're looking for consistent data schema being returned by the agent, it's highly recommended to use https://json-schema.org/.
     */
    data_extraction_schema?: TaskRunRequest.DataExtractionSchema;
    /**
     * Custom mapping of error codes to error messages if Skyvern encounters an error.
     */
    error_code_mapping?: Record<string, string | undefined>;
    /**
     * Maximum number of steps the task can take. Task will fail if it exceeds this number. Cautions: you are charged per step so please set this number to a reasonable value. Contact sales@skyvern.com for custom pricing.
     */
    max_steps?: number;
    /**
     * After a run is finished, send an update to this URL. Refer to https://www.skyvern.com/docs/running-tasks/webhooks-faq for more details.
     */
    webhook_url?: string;
    /**
     * Identifier for the TOTP/2FA/MFA code when the code is pushed to Skyvern. Refer to https://www.skyvern.com/docs/credentials/totp#option-3-push-code-to-skyvern for more details.
     */
    totp_identifier?: string;
    /**
     * URL that serves TOTP/2FA/MFA codes for Skyvern to use during the workflow run. Refer to https://www.skyvern.com/docs/credentials/totp#option-2-get-code-from-your-endpoint for more details.
     */
    totp_url?: string;
    /**
     * Run the task or workflow in the specific Skyvern browser session. Having a browser session can persist the real-time state of the browser, so that the next run can continue from where the previous run left off.
     */
    browser_session_id?: string;
    /**
     * Optional model configuration.
     */
    model?: Record<string, unknown>;
    /** The extra HTTP headers for the requests in browser. */
    extra_http_headers?: Record<string, string | undefined>;
    /** Whether to publish this task as a reusable workflow. Only available for skyvern-2.0. */
    publish_workflow?: boolean;
    /** Whether to include action history when verifying that the task is complete */
    include_action_history_in_verification?: boolean;
    /** The maximum number of scrolls for the post action screenshot. When it's None or 0, it takes the current viewpoint screenshot. */
    max_screenshot_scrolls?: number;
    /** The CDP address for the task. */
    browser_address?: string;
}

export namespace TaskRunRequest {
    /**
     *
     * The schema for data to be extracted from the webpage. If you're looking for consistent data schema being returned by the agent, it's highly recommended to use https://json-schema.org/.
     */
    export type DataExtractionSchema = Record<string, unknown> | unknown[] | string;
}
