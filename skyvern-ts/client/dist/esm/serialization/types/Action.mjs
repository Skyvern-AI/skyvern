// This file was auto-generated by Fern from our API Definition.
import * as core from "../../core/index.mjs";
import { ActionStatus } from "./ActionStatus.mjs";
import { ActionType } from "./ActionType.mjs";
import { InputOrSelectContext } from "./InputOrSelectContext.mjs";
import { SelectOption } from "./SelectOption.mjs";
import { UserDefinedError } from "./UserDefinedError.mjs";
export const Action = core.serialization.object({
    actionType: core.serialization.property("action_type", ActionType),
    status: ActionStatus.optional(),
    actionId: core.serialization.property("action_id", core.serialization.string().optional()),
    sourceActionId: core.serialization.property("source_action_id", core.serialization.string().optional()),
    organizationId: core.serialization.property("organization_id", core.serialization.string().optional()),
    workflowRunId: core.serialization.property("workflow_run_id", core.serialization.string().optional()),
    taskId: core.serialization.property("task_id", core.serialization.string().optional()),
    stepId: core.serialization.property("step_id", core.serialization.string().optional()),
    stepOrder: core.serialization.property("step_order", core.serialization.number().optional()),
    actionOrder: core.serialization.property("action_order", core.serialization.number().optional()),
    confidenceFloat: core.serialization.property("confidence_float", core.serialization.number().optional()),
    description: core.serialization.string().optional(),
    reasoning: core.serialization.string().optional(),
    intention: core.serialization.string().optional(),
    response: core.serialization.string().optional(),
    elementId: core.serialization.property("element_id", core.serialization.string().optional()),
    skyvernElementHash: core.serialization.property("skyvern_element_hash", core.serialization.string().optional()),
    skyvernElementData: core.serialization.property("skyvern_element_data", core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()),
    toolCallId: core.serialization.property("tool_call_id", core.serialization.string().optional()),
    xpath: core.serialization.string().optional(),
    errors: core.serialization.list(UserDefinedError).optional(),
    dataExtractionGoal: core.serialization.property("data_extraction_goal", core.serialization.string().optional()),
    fileName: core.serialization.property("file_name", core.serialization.string().optional()),
    fileUrl: core.serialization.property("file_url", core.serialization.string().optional()),
    download: core.serialization.boolean().optional(),
    isUploadFileTag: core.serialization.property("is_upload_file_tag", core.serialization.boolean().optional()),
    text: core.serialization.string().optional(),
    inputOrSelectContext: core.serialization.property("input_or_select_context", InputOrSelectContext.optional()),
    option: SelectOption.optional(),
    isChecked: core.serialization.property("is_checked", core.serialization.boolean().optional()),
    verified: core.serialization.boolean().optional(),
    totpTimingInfo: core.serialization.property("totp_timing_info", core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()),
    createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
    modifiedAt: core.serialization.property("modified_at", core.serialization.date().optional()),
    createdBy: core.serialization.property("created_by", core.serialization.string().optional()),
});
