services:
  postgres:
    image: postgres:14-alpine
    restart: always
    # comment out if you want to externally connect DB
    # ports:
    #   - 5432:5432
    volumes:
      # Using a named volume for persistent database storage on the server
      - postgres-data:/var/lib/postgresql/data
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=skyvern
      - POSTGRES_PASSWORD=skyvern
      - POSTGRES_DB=skyvern
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skyvern"]
      interval: 5s
      timeout: 5s
      retries: 5

  skyvern:
    image: public.ecr.aws/skyvern/skyvern:latest
    restart: on-failure
    # env_file is removed to manage variables in the Coolify UI.
    ports:
      # Includes default values. Coolify UI variables will override these.
      - "${SKYVERN_HOST_PORT:-8001}:8000"
      - "${CDP_HOST_PORT:-9222}:9222"
    volumes:
      # Using named volumes for persistent artifact/log storage
      - artifacts-data:/data/artifacts
      - videos-data:/data/videos
      - har-data:/data/har
      - log-data:/data/log
      - streamlit-data:/app/.streamlit
      # Uncomment the following two lines if you want to connect to any local changes
      # - ./skyvern:/app/skyvern
      # - ./alembic:/app/alembic
    environment:
      - DATABASE_STRING=postgresql+psycopg://skyvern:skyvern@postgres:5432/skyvern
      - BROWSER_TYPE=chromium-headful
      - ENABLE_CODE_BLOCK=true
      # - BROWSER_TYPE=cdp-connect
      # Use this command to start Chrome with remote debugging:
      # "C:\Program Files\Google\Chrome\Application\chrome.exe" --remote-debugging-port=9222 --user-data-dir="C:\chrome-cdp-profile" --no-first-run --no-default-browser-check
      # /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --remote-debugging-port=9222 --user-data-dir="/Users/yourusername/chrome-cdp-profile" --no-first-run --no-default-browser-check
      # - BROWSER_REMOTE_DEBUGGING_URL=http://host.docker.internal:9222/
      # =========================
      #       LLM Settings - Recommended to use skyvern CLI, `skyvern init llm` to setup your LLM's
      # =========================
      # OpenAI Support:
      - ENABLE_OPENAI=${ENABLE_OPENAI:-false}
      - LLM_KEY=${LLM_KEY:-OPENAI_GPT4O}
      - OPENAI_API_KEY=${OPENAI_API_KEY} # Set this secret in the Coolify UI
      # Gemini Support:
      # To use, uncomment and set the GEMINI_API_KEY in the Coolify UI.
      # - LLM_KEY=GEMINI
      - ENABLE_GEMINI=${ENABLE_GEMINI:-false}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      # - LLM_KEY=GEMINI_2.5_PRO_PREVIEW_03_25
      # Anthropic Support:
      # - ENABLE_ANTHROPIC=true
      # - LLM_KEY=ANTHROPIC_CLAUDE3.5_SONNET
      # - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # Microsoft Azure OpenAI support:
      # - ENABLE_AZURE=true
      # - LLM_KEY=AZURE_OPENAI                          # Leave this value static, don't change it
      # - AZURE_DEPLOYMENT=${AZURE_DEPLOYMENT}      # Use the OpenAI model "Deployment Name" that you deployed
      # - AZURE_API_KEY=${AZURE_API_KEY}            # Copy and paste Key1 or Key2 from the OpenAI resource in Azure Portal
      # - AZURE_API_BASE=${AZURE_API_BASE}          # Copy and paste the "Endpoint" from the OpenAI resource in Azure Portal
      # - AZURE_API_VERSION=${AZURE_API_VERSION}    # Specify a valid Azure OpenAI data-plane API version (eg. 2024-08-01-preview)
      # Amazon Bedrock Support:
      # - ENABLE_BEDROCK=true
      # - LLM_KEY=BEDROCK_ANTHROPIC_CLAUDE3.5_SONNET
      # - AWS_REGION=us-west-2
      # - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      # - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # Ollama Support:
      # - LLM_KEY=OLLAMA
      # - ENABLE_OLLAMA=true
      # - OLLAMA_MODEL=qwen2.5:7b-instruct
      # - OLLAMA_SERVER_URL=http://host.docker.internal:11434
      # Open Router Support:
      # - ENABLE_OPENROUTER=true
      # - LLM_KEY=OPENROUTER
      # - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      # - OPENROUTER_MODEL=mistralai/mistral-small-3.1-24b-instruct
      # Groq Support:
      # - ENABLE_GROQ=true
      # - LLM_KEY=GROQ
      # - GROQ_API_KEY=${GROQ_API_KEY}
      # - GROQ_MODEL=llama-3.1-8b-instant
      # Maximum tokens to use: (only set for OpenRouter and Ollama)
      # - LLM_CONFIG_MAX_TOKENS=128000
      # Bitwarden Settings
      # - BITWARDEN_SERVER=http://localhost
      # - BITWARDEN_SERVER_PORT=8002
      # - BITWARDEN_CLIENT_ID=${BITWARDEN_CLIENT_ID}
      # - BITWARDEN_CLIENT_SECRET=${BITWARDEN_CLIENT_SECRET}
      # - BITWARDEN_MASTER_PASSWORD=${BITWARDEN_MASTER_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "test", "-f", "/app/.streamlit/secrets.toml"]
      interval: 5s
      timeout: 5s
      retries: 5

  skyvern-ui:
    image: public.ecr.aws/skyvern/skyvern-ui:latest
    restart: on-failure
    ports:
      # Includes default values. Coolify UI variables will override these.
      - "${UI_HOST_PORT:-8081}:8080"
      - "${UI_ARTIFACT_PORT:-9090}:9090"
    volumes:
      # Using named volumes shared with the skyvern service
      - artifacts-data:/data/artifacts
      - videos-data:/data/videos
      - har-data:/data/har
      - streamlit-data:/app/.streamlit
    # The environment block is now correctly placed here and uses Coolify's templating.
    environment:
    # Declare the Service FQDN in Coolify
      - VITE_ENABLE_CODE_BLOCK=true
    # if you want to run skyvern on a remote server,
    # you need to change the host in VITE_WSS_BASE_URL and VITE_API_BASE_URL to match your server ip
    # If you're self-hosting this behind a dns, you'll want to set:
    #   A route for the API: api.yourdomain.com -> localhost:8001
    #   A route for the UI: yourdomain.com -> localhost:8080
    #   A route for the artifact API: artifact.yourdomain.com -> localhost:9090 (maybe not needed)
      - VITE_WSS_BASE_URL=wss://${COOLIFY_FQDN}
      - VITE_ARTIFACT_API_BASE_URL=https://artifact.${COOLIFY_FQDN}
      - VITE_API_BASE_URL=${SERVICE_FQDN_API}https://api.${COOLIFY_FQDN}/api/v1
    # This will appear as an editable field in the UI. Get the value from the Skyvern UI's settings page after first deployment.
      - VITE_SKYVERN_API_KEY=${VITE_SKYVERN_API_KEY}
    depends_on:
      skyvern:
        condition: service_healthy

# Top-level declaration for all named volumes used by the services.
# This is required for Docker to create them.
volumes:
  postgres-data: {}
  artifacts-data: {}
  videos-data: {}
  har-data: {}
  log-data: {}
  streamlit-data: {}
