"use strict";
// This file was auto-generated by Fern from our API Definition.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowDefinitionYamlBlocksItem = void 0;
const core = __importStar(require("../../core/index.js"));
const serializers = __importStar(require("../index.js"));
const ActionBlockYaml_js_1 = require("./ActionBlockYaml.js");
const CodeBlockYaml_js_1 = require("./CodeBlockYaml.js");
const DownloadToS3BlockYaml_js_1 = require("./DownloadToS3BlockYaml.js");
const ExtractionBlockYaml_js_1 = require("./ExtractionBlockYaml.js");
const FileDownloadBlockYaml_js_1 = require("./FileDownloadBlockYaml.js");
const FileParserBlockYaml_js_1 = require("./FileParserBlockYaml.js");
const FileUploadBlockYaml_js_1 = require("./FileUploadBlockYaml.js");
const HttpRequestBlockYaml_js_1 = require("./HttpRequestBlockYaml.js");
const LoginBlockYaml_js_1 = require("./LoginBlockYaml.js");
const NavigationBlockYaml_js_1 = require("./NavigationBlockYaml.js");
const PdfParserBlockYaml_js_1 = require("./PdfParserBlockYaml.js");
const SendEmailBlockYaml_js_1 = require("./SendEmailBlockYaml.js");
const TaskBlockYaml_js_1 = require("./TaskBlockYaml.js");
const TaskV2BlockYaml_js_1 = require("./TaskV2BlockYaml.js");
const TextPromptBlockYaml_js_1 = require("./TextPromptBlockYaml.js");
const UploadToS3BlockYaml_js_1 = require("./UploadToS3BlockYaml.js");
const UrlBlockYaml_js_1 = require("./UrlBlockYaml.js");
const ValidationBlockYaml_js_1 = require("./ValidationBlockYaml.js");
const WaitBlockYaml_js_1 = require("./WaitBlockYaml.js");
exports.WorkflowDefinitionYamlBlocksItem = core.serialization
    .union(core.serialization.discriminant("blockType", "block_type"), {
    action: ActionBlockYaml_js_1.ActionBlockYaml,
    code: CodeBlockYaml_js_1.CodeBlockYaml,
    download_to_s3: DownloadToS3BlockYaml_js_1.DownloadToS3BlockYaml,
    extraction: ExtractionBlockYaml_js_1.ExtractionBlockYaml,
    file_download: FileDownloadBlockYaml_js_1.FileDownloadBlockYaml,
    file_upload: FileUploadBlockYaml_js_1.FileUploadBlockYaml,
    file_url_parser: FileParserBlockYaml_js_1.FileParserBlockYaml,
    for_loop: core.serialization.lazyObject(() => serializers.ForLoopBlockYaml),
    goto_url: UrlBlockYaml_js_1.UrlBlockYaml,
    http_request: HttpRequestBlockYaml_js_1.HttpRequestBlockYaml,
    login: LoginBlockYaml_js_1.LoginBlockYaml,
    navigation: NavigationBlockYaml_js_1.NavigationBlockYaml,
    pdf_parser: PdfParserBlockYaml_js_1.PdfParserBlockYaml,
    send_email: SendEmailBlockYaml_js_1.SendEmailBlockYaml,
    task: TaskBlockYaml_js_1.TaskBlockYaml,
    task_v2: TaskV2BlockYaml_js_1.TaskV2BlockYaml,
    text_prompt: TextPromptBlockYaml_js_1.TextPromptBlockYaml,
    upload_to_s3: UploadToS3BlockYaml_js_1.UploadToS3BlockYaml,
    validation: ValidationBlockYaml_js_1.ValidationBlockYaml,
    wait: WaitBlockYaml_js_1.WaitBlockYaml,
})
    .transform({
    transform: (value) => value,
    untransform: (value) => value,
});
