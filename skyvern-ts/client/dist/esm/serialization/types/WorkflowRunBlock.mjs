// This file was auto-generated by Fern from our API Definition.
import * as core from "../../core/index.mjs";
import { Action } from "./Action.mjs";
import { BlockType } from "./BlockType.mjs";
import { RunEngine } from "./RunEngine.mjs";
import { WorkflowRunBlockDataSchema } from "./WorkflowRunBlockDataSchema.mjs";
import { WorkflowRunBlockNavigationPayload } from "./WorkflowRunBlockNavigationPayload.mjs";
import { WorkflowRunBlockOutput } from "./WorkflowRunBlockOutput.mjs";
export const WorkflowRunBlock = core.serialization.object({
    workflowRunBlockId: core.serialization.property("workflow_run_block_id", core.serialization.string()),
    blockWorkflowRunId: core.serialization.property("block_workflow_run_id", core.serialization.string().optional()),
    workflowRunId: core.serialization.property("workflow_run_id", core.serialization.string()),
    organizationId: core.serialization.property("organization_id", core.serialization.string()),
    description: core.serialization.string().optional(),
    parentWorkflowRunBlockId: core.serialization.property("parent_workflow_run_block_id", core.serialization.string().optional()),
    blockType: core.serialization.property("block_type", BlockType),
    label: core.serialization.string().optional(),
    status: core.serialization.string().optional(),
    output: WorkflowRunBlockOutput.optional(),
    continueOnFailure: core.serialization.property("continue_on_failure", core.serialization.boolean().optional()),
    failureReason: core.serialization.property("failure_reason", core.serialization.string().optional()),
    engine: RunEngine.optional(),
    taskId: core.serialization.property("task_id", core.serialization.string().optional()),
    url: core.serialization.string().optional(),
    navigationGoal: core.serialization.property("navigation_goal", core.serialization.string().optional()),
    navigationPayload: core.serialization.property("navigation_payload", WorkflowRunBlockNavigationPayload.optional()),
    dataExtractionGoal: core.serialization.property("data_extraction_goal", core.serialization.string().optional()),
    dataSchema: core.serialization.property("data_schema", WorkflowRunBlockDataSchema.optional()),
    terminateCriterion: core.serialization.property("terminate_criterion", core.serialization.string().optional()),
    completeCriterion: core.serialization.property("complete_criterion", core.serialization.string().optional()),
    actions: core.serialization.list(Action).optional(),
    createdAt: core.serialization.property("created_at", core.serialization.date()),
    modifiedAt: core.serialization.property("modified_at", core.serialization.date()),
    includeActionHistoryInVerification: core.serialization.property("include_action_history_in_verification", core.serialization.boolean().optional()),
    duration: core.serialization.number().optional(),
    loopValues: core.serialization.property("loop_values", core.serialization.list(core.serialization.unknown()).optional()),
    currentValue: core.serialization.property("current_value", core.serialization.string().optional()),
    currentIndex: core.serialization.property("current_index", core.serialization.number().optional()),
    recipients: core.serialization.list(core.serialization.string()).optional(),
    attachments: core.serialization.list(core.serialization.string()).optional(),
    subject: core.serialization.string().optional(),
    body: core.serialization.string().optional(),
});
